@using Dentist.Enums
@using Dentist.Models
@model Dentist.ViewModels.AppointmentView

<script>
    function filterPracticeByDoctor() {
        return { doctorId : $("#DoctorId").val()}
    }
</script>
           
<fieldset class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="editor-label">
        @Html.LabelFor(model => model.DoctorId, new { @class = "control-label" })
    </div>
    <div class="editor-field">
        @(Html.Kendo().DropDownListFor(model => model.DoctorId)
              .OptionLabel("--Select--")
              .HtmlAttributes(new { style = "width: 100%" })
              .DataTextField("Text")
              .DataValueField("Id")
              .DataSource(source => source.Read(read => read.Action("GetAllIdTexts", "Doctor")))
        )
        @Html.ValidationMessageFor(model => model.PatientId, "", new { @class = "text-danger" })
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.PracticeId, new { @class = "control-label" })
    </div>
    <div class="editor-field">
        @(Html.Kendo().DropDownListFor(model => model.PracticeId)
              .OptionLabel("--Select--")
              .HtmlAttributes(new { style = "width: 100%" })
              .DataTextField("Text")
              .DataValueField("Id")
              .DataSource(source => source.Read(read => read
                  .Action("GetPracticesIdTextsByDoctor", "Practice").Data("filterPracticeByDoctor"))
                  .ServerFiltering(true))
              .AutoBind(false)
              .CascadeFrom("DoctorId")
        )
        @Html.ValidationMessageFor(model => model.PracticeId, "", new { @class = "text-danger" })
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.PatientId, new { @class = "control-label" })
    </div>
    <div class="editor-field">
        @(Html.Kendo().DropDownListFor(model => model.PatientId)
              .OptionLabel("--Select--")
              .HtmlAttributes(new { style = "width: 100%" })
              .DataTextField("Text")
              .DataValueField("Id")
              .DataSource(source => source.Read(read => read.Action("GetAllIdTexts", "Patient")))
              )
        @Html.ValidationMessageFor(model => model.PatientId, "", new { @class = "text-danger" })
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.StartDateTime, htmlAttributes: new { @class = "control-label" })
    </div>
    <div class="editor-field">
        @Html.Kendo().DateTimePickerFor(model => model.StartDateTime)
        @Html.ValidationMessageFor(model => model.StartDateTime, "", new { @class = "text-danger" })
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.EndDateTime, htmlAttributes: new { @class = "control-label" })
    </div>
    <div class="editor-field">
        @Html.Kendo().DateTimePickerFor(model => model.EndDateTime)
        @Html.ValidationMessageFor(model => model.EndDateTime, "", new { @class = "text-danger" })
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.AppointmentStatus, new { @class = "control-label" })
    </div>
    <div class="editor-field">
        @(Html.Kendo().DropDownListFor(model => model.AppointmentStatus)
              .OptionLabel("--Select--")
              .HtmlAttributes(new { style = "width: 100%" })
              .BindTo(EnumHelper.GetSelectList(typeof(AppointmentStatus)))
              
              )
        @Html.ValidationMessageFor(model => model.AppointmentStatus, "", new { @class = "text-danger" })
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
    </div>
    <div class="editor-field">
        @Html.TextAreaFor(model => model.Description)
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>

</fieldset>

