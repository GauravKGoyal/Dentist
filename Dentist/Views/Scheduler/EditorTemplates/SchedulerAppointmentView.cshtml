@using Dentist.Enums
@using Dentist.Models
@model Dentist.ViewModels.SchedulerAppointmentView

<script>
    function filterDoctorIdBy() {
        return { personRole: 1 }
    }
</script>

    @Html.HiddenFor(x => x.Id)


    <div id="patientDiv">

        <div class="alert alert-info" role="alert">
            <ul>
                <li>
                    Find an existing patient using search box. <strong>OR</strong>
                </li>
                @*<li style="list-style: none">
                        or
                    </li>*@
                <li>
                    Keep search box clear to add a new patient.
                </li>
            </ul>
        </div>

        <div class="k-edit-label">
            @Html.LabelFor(model => model.PatientId)
        </div>
        <div class="k-edit-field">
            @(Html.Kendo().ComboBox()
                  .Name("PatientId")
                  .DataTextField("Text")
                  .DataValueField("Id")
                  .Placeholder("Type a patient name")
                  .Filter("contains")
                  .AutoBind(true)
                  .MinLength(2)
                  .HtmlAttributes(new { style = "width: 100%" })
                  .DataSource(source =>
                  {
                      source.Read(read =>
                      {
                          read.Action("GetAllIdTexts", "people");
                      });
                  })
                  .Events(e => e.Change("PatientId_OnChange"))
            )
            @Html.ValidationMessageFor(model => model.PatientId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="k-edit-label">
        @Html.LabelFor(model => model.FirstName)
    </div>
    <div class="k-edit-field">
        <div>
            @Html.Kendo().TextBoxFor(model => model.FirstName)
        </div>
        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
    </div>


    <div class="k-edit-label">
        @Html.LabelFor(model => model.LastName)
    </div>
    <div class="k-edit-field">
        @Html.Kendo().TextBoxFor(model => model.LastName)
        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
    </div>

    <div class="k-edit-label">
        @Html.LabelFor(model => model.Phone)
    </div>
    <div class="k-edit-field">
        @Html.Kendo().TextBoxFor(model => model.Phone)
        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
    </div>

    <div class="k-edit-label">
        @Html.LabelFor(model => model.Start)
    </div>
    <div class="k-edit-field">
        @Html.Kendo().DateTimePickerFor(model => model.Start).HtmlAttributes(new { data_bind = "value:start" })
        @Html.ValidationMessageFor(model => model.Start, "", new { @class = "text-danger" })
    </div>

    <div class="k-edit-label">
        @Html.LabelFor(model => model.End)
    </div>
    <div class="k-edit-field">
        @Html.Kendo().DateTimePickerFor(model => model.End).HtmlAttributes(new { data_bind = "value:end" })
        @Html.ValidationMessageFor(model => model.End, "", new { @class = "text-danger" })
    </div>

    <div class="k-edit-label">
        @Html.LabelFor(model => model.DoctorId)
    </div>
    <div class="k-edit-field">
        @(Html.Kendo().DropDownListFor(model => model.DoctorId)
              .OptionLabel("--Select--")
              .DataTextField("Text")
              .DataValueField("Id")
              .ValueTemplate("<span class='glyphicon glyphicon-user' style='color:\\#= data.Color?Color:'' \\#'></span> \\#=Text\\#")
              .Template("<span class='glyphicon glyphicon-user' style='color:\\#= data.Color?Color:'' \\#'></span> \\#=Text\\#")
              .DataSource(source => source.Read(read => read.Action("GetAllIdTexts", "People")
              .Data("filterDoctorIdBy")))
        )
        @Html.ValidationMessageFor(model => model.DoctorId, "", new { @class = "text-danger" })
    </div>

    <div class="k-edit-label">
        @Html.LabelFor(model => model.PracticeId)
    </div>
    <div class="k-edit-field">
        @(Html.Kendo().DropDownListFor(model => model.PracticeId)
              .OptionLabel("--Select--")
              .DataTextField("Text")
              .DataValueField("Id")
              .ValueTemplate("<span class='glyphicon glyphicon-home' style='color:\\#= data.Color?Color:'' \\#'></span> \\#=Text\\#")
              .Template("<span class='glyphicon glyphicon-home' style='color:\\#= data.Color?Color:'' \\#'></span> \\#=Text\\#")
              .DataSource(source => source.Read(read => read
                    .Action("GetPracticesIdTextsByDoctor", "Practice")
                    .Data("filterPracticeByDoctor"))
              .ServerFiltering(true))
              .AutoBind(false)
              .CascadeFrom("DoctorId")
        )
        @Html.ValidationMessageFor(model => model.PracticeId, "", new { @class = "text-danger" })
    </div>


    <div class="k-edit-label">
        @Html.LabelFor(model => model.AppointmentStatus)
    </div>
    <div class="k-edit-field">
        @(Html.Kendo().DropDownListFor(model => model.AppointmentStatus)
              .OptionLabel("--Select--")
              .BindTo(EnumHelper.GetSelectList(typeof(AppointmentStatus)))

        )
        @Html.ValidationMessageFor(model => model.AppointmentStatus, "", new { @class = "text-danger" })
    </div>

    <div class="k-edit-label">
        @Html.LabelFor(model => model.Description)
    </div>
    <div class="k-edit-field">
        @Html.TextAreaFor(model => model.Description)
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>

    <div class="k-edit-label">
        @(Html.LabelFor(model => model.RecurrenceRule))
    </div>
    <div class="k-edit-field">
        @(Html.Kendo().RecurrenceEditorFor(model => model.RecurrenceRule)
        .HtmlAttributes(new { data_bind = "value:recurrenceRule" }))
        @Html.ValidationMessageFor(model => model.RecurrenceRule, "", new { @class = "text-danger" })
    </div>

    <div class="k-edit-label">
        @(Html.LabelFor(model => model.IsBreak))
    </div>
    <div class="k-edit-field">
        @(Html.CheckBoxFor(model => model.IsBreak))
        @Html.ValidationMessageFor(model => model.IsBreak, "", new { @class = "text-danger" })
    </div>

