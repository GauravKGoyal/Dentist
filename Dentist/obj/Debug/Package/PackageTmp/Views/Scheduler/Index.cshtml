@using Dentist.ViewModels
@{
    ViewBag.Title = "Scheduler";
    List<SchedulerDoctorView> doctors = ViewBag.Doctors;
    List<SchedulerPracticeView> practices = ViewBag.Practices;
}


<div id="splitter">
    <div id="left-pane">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Doctors</h3>
            </div>
            <div class="panel-body">
                @(Html.Kendo().TreeView()
                .Name("trvDoctors")
                .Checkboxes(config => config.CheckChildren(true))
                .ExpandAll(true)
                .BindTo((IEnumerable<TreeViewItemModel>)ViewBag.DoctorsInTreeView))
            </div>


            @*<div class="panel-footer"> </div>*@
            <div class="alert alert-info" role="alert" style="margin-bottom: 0px">
                All the appointments are shown for the clinic. To see the appointments of a specific doctor please select them.
            </div>
        </div>
    </div>
    <div id="right-pane">
        @(Html.Kendo().Scheduler<SchedulerAppointmentView>()
            .Name("scheduler")
            .Date(DateTime.Today)
            .AllDaySlot(false)
            .WorkDayStart(new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day, 10, 00, 00))
            .WorkDayEnd(new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day, 15, 00, 00))
            .StartTime(new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day, 8, 00, 00))
            .EndTime(new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.Today.Day, 17, 00, 00))
            .WorkWeekStart((int)DayOfWeek.Monday)
            .WorkWeekEnd((int)DayOfWeek.Saturday)
            .EventTemplate(
            "<div class='appointment-template' style='border-left-color: #= PracticeColor #;'>" +
                "<p style='padding-left:2px'>#= title #</p>" +
            "</div>")
            .Events(x =>
            {
                x.Add("scheduler_OnAdd");
                x.Edit("scheduler_OnEdit");
            })
            .Views(views =>
            {
                views.DayView();
                views.WorkWeekView(workWeekView => workWeekView.Selected(true));
                views.WeekView();
                views.MonthView();
                views.AgendaView();
                //views.TimelineView();
            })
                //.Timezone("Etc/UTC")
            //.Group(group => group.Resources("PracticeId", "DoctorId").Orientation(SchedulerGroupOrientation.Vertical))
            .Editable(config => config.TemplateName("SchedulerAppointmentView"))
                                            
            .Resources(resource =>
            {
                resource.Add(m => m.DoctorId)
                    .Title("Doctor")
                    .DataTextField("FirstName")
                    .DataValueField("Id")
                    .DataColorField("Color")
                    .BindTo(doctors);

                resource.Add(m => m.PracticeId)
                    .Title("Practice")
                    .DataTextField("Name") 
                    .DataValueField("Id")
                    .DataColorField("Color")
                    .BindTo(practices);

            })
            .DataSource(d => d
            .Model(m =>
            {
                m.Id(f => f.Id);
                m.Field(f => f.Title).DefaultValue("No title");
            })

            .Read(read => read.Action("GetBrowserItems", "Scheduler").Data("filterSchedulerByDoctors"))
            .Create("CreateAppointment", "Scheduler")
            .Destroy("DeleteAppointment", "Scheduler")
            .Update("UpdateAppointment", "Scheduler")

            )
        )

    </div>
</div>



<script>
    var selectedDoctorsId = [];
    var selectedPracticesId = [];

    function isDoctorCheckedBox(element) {
        var parent = $(element).parent().parent();
        var treeItem = parent.find(".dentistTreeItem");
        return treeItem.attr('data-type') == 'doctor';
    }

    function GetSeletectedDoctorsAndPracticies() {
        selectedDoctorsId = [];
        selectedPracticesId = [];

        var checkboxes = $('#trvDoctors input[type=checkbox]');
        for (var i = 0; i < checkboxes.length; i++) {
            var checkbox = checkboxes[i];
            if (isDoctorCheckedBox(checkbox)) {
                if ($(checkbox).is(':checked')) {
                    selectedDoctorsId.push(checkbox.value);
                }
                else if (checkbox.indeterminate == true) {
                    selectedDoctorsId.push(checkbox.value);
                }
                else {
                    var removeItem = checkbox.value;
                    selectedDoctorsId = jQuery.grep(selectedDoctorsId, function (value) {
                        return value != removeItem;
                    });
                }
            }
            else {
                if ($(checkbox).is(':checked')) {
                    selectedPracticesId.push(checkbox.value);
                }
                else if (checkbox.indeterminate == true) {
                    selectedPracticesId.push(checkbox.value);
                }
                else {
                    var removeItemValue = checkbox.value;
                    selectedPracticesId = jQuery.grep(selectedPracticesId, function (value) {
                        return value != removeItemValue;
                    });
                }
            }
        }
    }

    $(function () {
        var splitterHeight = window.innerHeight - 140;
        $("#splitter").css("height", splitterHeight);
        $("#scheduler").css("height", splitterHeight - 2);

        $('#trvDoctors input[type=checkbox]').click(function () {
            GetSeletectedDoctorsAndPracticies();
            $('#scheduler').data('kendoScheduler').dataSource.read();
        });

        PlaceColorSpanNextToDoctorAndPracticeNameInTree();

        $("#splitter").kendoSplitter({
            orientation: "horizontal",
            panes: [
                { collapsible: false, resizable: false, size: "20%" },
                { collapsible: false, collapsed: false }
            ]
        });

    });

    function PlaceColorSpanNextToDoctorAndPracticeNameInTree() {
        for (var i = 0; i < $(".dentistTreeItem").length; i++) {
            var treeItem = $(".dentistTreeItem")[i];
            var color = $(treeItem).attr("data-color");
            var isDoctor = $(treeItem).attr('data-type') == 'doctor';
            var imageSpan = "";
            if (isDoctor) {
                imageSpan = '<span class="glyphicon glyphicon-user" style ="color:' + color + '"></span>';
            } else {
                imageSpan = '<span class="glyphicon glyphicon-home" style ="color:' + color + '"></span>';
            }
            treeItem.innerHTML = imageSpan + " " + treeItem.innerHTML;
        }
    }

    function filterSchedulerByDoctors() {
        return {
            doctorsIds: selectedDoctorsId.toString(),
            practiceIds: selectedPracticesId.toString()
        };
    }

    function scheduler_OnEdit(e) {
        var isNew = e.event.Id == 0;
        if (isNew) {
            $("#patientDiv").show();
            e.container.kendoWindow("title", "Create Appointment");
        } else {
            $("#patientDiv").hide();
            e.container.kendoWindow("title", "Edit Appointment");
        }
    }

    function scheduler_OnAdd(e) {
        if (selectedDoctorsId.length !== 0) {
            e.event.DoctorId = selectedDoctorsId[0];
        }

    }

    function PatientId_OnChange() {
        // fix control issue, ie updating the patientId on combobox does not update the view model
        UpdateViewModelPatientId();

        var ddl = $("#PatientId").data('kendoComboBox');
        var selectedPatient = ddl.dataItem(ddl.selectedIndex);

        if ((selectedPatient !== undefined) && (selectedPatient !== null)) {
            UpdateFormControls(selectedPatient);
        }

    }

    function UpdateViewModelPatientId() {
        //$("#PatientId").change(); this statement is not working
        if ($('#PatientId').prop('kendoBindingTarget') !== undefined && $('#PatientId').prop('kendoBindingTarget').source !== undefined) {
            var viewModel = $('#PatientId').prop('kendoBindingTarget').source;
            viewModel.PatientId = $('#PatientId').val();
        }
    }

    function UpdateFormControls(patient) {
        $("#FirstName").val(patient.FirstName).change();
        $("#LastName").val(patient.LastName).change();
        $("#Phone").val(patient.Phone).change();
    }

    function filterPracticeByDoctor() {
        return { doctorId: $("#DoctorId").val() }
    }

</script>
